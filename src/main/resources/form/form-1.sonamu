pragma solidity ^0.5.1;

contract escrow {
    address payable seller;
    address payable buyer;
    uint public price;
    uint public pay;
    uint public number;
    string public state;

    constructor(uint _price) public payable {
        seller = msg.sender;
        price = _price;
        pay = price*2;
        state = "start";
        number = /* 운송장 번호 */;
        emit const1();
    }

    function purchase_request() public payable
    {
        require(msg.value == pay && equal(state,"start"));
        // keccak256(state) == keccak256("start"));
        buyer = msg.sender;
        state = "processing";
        emit p_request();
    }

    function input_number(uint _number) public {
      require(msg.sender == seller);
      number = _number;
    }

    function buyer_receive(uint _number) public payable
    {
        require(msg.sender == buyer && equal(state, "processing"));
        // keccak256(state) == keccak256("processing"));
        if(number !=0){require(number == _number);}
        state = "success";
        buyer.transfer(price);
        seller.transfer(address(this).balance);
        emit b_receive();
    }

    function transact_cancel() public payable
    {
        if(equal(state,"start")) {
          seller.transfer(address(this).balance);
        }
        else if(equal(state,"processing")) {
          buyer.transfer(2*price);
          seller.transfer(address(this).balance);
        }
        state = "cancel";
        emit t_cancel();
    }

    event const1();
    event p_request();
    event b_receive();
    event t_cancel();

  // helper functions

    function compare(string memory _a, string memory _b) private pure returns (int) {
        bytes memory a = bytes(_a);
        bytes memory b = bytes(_b);
        uint minLength = a.length;
        if (b.length < minLength) minLength = b.length;
        for (uint i = 0; i < minLength; i ++)
            if (a[i] < b[i])
                return -1;
            else if (a[i] > b[i])
                return 1;
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return 0;
    }

    function equal(string memory _a, string memory _b) private pure returns (bool) {
        return compare(_a, _b) == 0;
    }

}